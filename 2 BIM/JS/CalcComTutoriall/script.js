let display = document.getElementById("display");

function adicionar(valor) {
  display.value += valor;
}

function limpar() {
  display.value = "";
}

function calcular() {
  let expressao = display.value;

  // Fatorial
  if (expressao.includes('!')) {
    let num = parseFloat(expressao.replace('!', ''));
    if (isNaN(num) || num < 0 || !Number.isInteger(num)) {
      display.value = "Erro";
      return;
    }
    display.value = fatorial(num);
    return;
  }

  // Quadrado
  if (expressao.includes('^2')) {
    let num = parseFloat(expressao.replace('^2', ''));
    if (isNaN(num)) {
      display.value = "Erro";
      return;
    }
    display.value = Math.pow(num, 2);
    return;
  }

  // Avalia√ß√£o normal da express√£o
  try {
    let resultado = eval(expressao);
    display.value = resultado;
  } catch (e) {
    display.value = "Erro";
  }
}

function fatorial(n) {
  if (n === 0 || n === 1) return 1;
  return n * fatorial(n - 1);
}



/*
Esse c√≥digo representa uma **calculadora simples**, feita com HTML, CSS e JavaScript. Vou te guiar passo a passo por **cada parte do projeto**, explicando **como tudo se conecta** e o que est√° **acontecendo nos bastidores**.

---

## üìÑ **1. HTML (estrutura da calculadora)**

```html
<!DOCTYPE html>
<html lang="pt-br">
```

* Indica que o documento √© HTML5.
* `lang="pt-br"`: define o idioma da p√°gina como portugu√™s brasileiro.

```html
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Calculadora</title>
  <link rel="stylesheet" href="style.css">
</head>
```

* Define configura√ß√µes iniciais da p√°gina.
* `link` importa o CSS externo chamado `style.css`.

```html
<body>
  <div class="calculadora">
    <input type="text" id="display" readonly>
```

* `input`: √© onde os n√∫meros e resultados aparecem.
* `readonly`: o usu√°rio n√£o pode digitar diretamente ‚Äî apenas clicar nos bot√µes.

---

### üßÆ Bot√µes da calculadora:

```html
<div class="botoes">
  <button onclick="limpar()">C</button>
  <button onclick="adicionar('^2')">x¬≤</button>
  <button onclick="adicionar('!')">!</button>
  ...
```

* Cada bot√£o chama uma **fun√ß√£o JavaScript** quando clicado:

  * `onclick="adicionar('7')"` ‚Üí adiciona `'7'` ao display.
  * `onclick="calcular()"` ‚Üí executa o c√°lculo.
  * `onclick="limpar()"` ‚Üí limpa tudo.

---

## üé® **2. CSS (apar√™ncia e layout)**

```css
body {
  background-color: #1f1f1f;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
```

* Centraliza a calculadora no meio da tela, tanto vertical quanto horizontalmente.

```css
.calculadora {
  background-color: #2c2c2c;
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0 0 10px #000;
}
```

* Define o estilo da ‚Äúcaixa‚Äù da calculadora.

```css
#display {
  height: 60px;
  text-align: right;
  font-size: 24px;
}
```

* O display mostra os n√∫meros √† direita, com tamanho de fonte grande.

```css
.botoes {
  display: grid;
  grid-template-columns: repeat(4, 60px);
  gap: 10px;
}
```

* Organiza os bot√µes em **4 colunas**, com espa√ßamento entre eles.
* `.zero { grid-column: span 2; }` ‚Üí o bot√£o "0" ocupa o espa√ßo de **dois bot√µes** na horizontal.

---

## üß† **3. JavaScript (funcionalidade)**

```js
let display = document.getElementById("display");
```

* Captura o elemento `<input>` para manipul√°-lo com JavaScript.

---

### ‚úçÔ∏è Fun√ß√£o `adicionar(valor)`

```js
function adicionar(valor) {
  display.value += valor;
}
```

* Concatena o valor clicado ao conte√∫do atual do display.
* Exemplo: se o usu√°rio clicar 5 e depois + ‚Üí o display mostra "5+"

---

### üßº Fun√ß√£o `limpar()`

```js
function limpar() {
  display.value = "";
}
```

* Limpa o display. Simples e direto.

---

### üßÆ Fun√ß√£o `calcular()`

Essa √© o **c√©rebro da calculadora**. Ela faz:

```js
let expressao = display.value;
```

* Captura a express√£o digitada, por exemplo: `"3+5"` ou `"6^2"` ou `"4!"`

---

#### üîÅ Caso 1: Fatorial (!)

```js
if (expressao.includes('!')) {
  let num = parseFloat(expressao.replace('!', ''));
  ...
  display.value = fatorial(num);
}
```

* Pega o n√∫mero antes do `!` e calcula o fatorial com uma **fun√ß√£o recursiva**.
* Exemplo: `"5!"` ‚Üí `fatorial(5)` ‚Üí 5 √ó 4 √ó 3 √ó 2 √ó 1 = **120**

---

#### üü™ Caso 2: Pot√™ncia ao quadrado (^2)

```js
if (expressao.includes('^2')) {
  let num = parseFloat(expressao.replace('^2', ''));
  display.value = Math.pow(num, 2);
}
```

* Usa `Math.pow(num, 2)` para elevar o n√∫mero ao quadrado.
* Exemplo: `"6^2"` ‚Üí `36`

---

#### ‚ûï Caso 3: Express√£o normal

```js
try {
  let resultado = eval(expressao);
  display.value = resultado;
} catch (e) {
  display.value = "Erro";
}
```

* `eval()` interpreta e calcula a express√£o como se fosse uma equa√ß√£o JavaScript.
* Exemplo: `"3+5*2"` ‚Üí `eval("3+5*2")` ‚Üí `13`

---

### üîÅ Fun√ß√£o auxiliar: `fatorial(n)`

```js
function fatorial(n) {
  if (n === 0 || n === 1) return 1;
  return n * fatorial(n - 1);
}
```

* Fun√ß√£o **recursiva** que calcula o fatorial:

  * fatorial(3) = 3 √ó fatorial(2)
  * fatorial(2) = 2 √ó fatorial(1)
  * fatorial(1) = 1 ‚Üí fim da recurs√£o

---

## ‚úÖ Resumo visual da execu√ß√£o

1. **Usu√°rio clica em um bot√£o** ‚Üí chama `adicionar()`.
2. Os valores aparecem no **display**.
3. Se clicar em `=`, a fun√ß√£o `calcular()` identifica:

   * Se √© `^2` ‚Üí calcula quadrado.
   * Se √© `!` ‚Üí calcula fatorial.
   * Se √© uma express√£o normal ‚Üí usa `eval()` para resolver.
4. O resultado aparece no display.

---

Se quiser, posso te mostrar como **melhorar o c√≥digo**, adicionar **tratamento de erro mais robusto**, suporte a **fatorial de m√∫ltiplos termos**, **ra√≠zes quadradas**, **hist√≥rico de opera√ß√µes** e por a√≠ vai. √â um √≥timo projeto pra aprender JS!

*/